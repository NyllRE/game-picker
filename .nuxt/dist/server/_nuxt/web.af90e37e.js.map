{"version":3,"file":"web.af90e37e.js","sources":["../../../../node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map"],"names":["resolve","path","posix","item","newPosix","isPathParent","parent","children","pathsA","pathsB","value","index","FilesystemWeb","WebPlugin","reject","request","event","db","cmd","args","readFlag","conn","req","indexName","directory","uriPath","cleanedUriPath","fsPath","options","entry","data","encoding","doRecursive","occupiedEntry","parentPath","subDirIndex","parentArgPath","now","pathObj","ctime","depth","parentEntry","recursive","fullPath","readDirResult","entryPath","entries","e","subEntry","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","fromObj","updateTime","mtime","file","writeResult","contents","filename","str"],"mappings":"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"}